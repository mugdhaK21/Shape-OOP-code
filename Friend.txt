Header.h
#ifndef BINARY_OPERATOR_H
#define BINARY_OPERATOR_H
#include<iostream>

using namespace std;
class Distance
{
      int meter;
      int cm;
public:
      Distance();
      Distance(int meter, int cm );
      int get_meter();
      int get_cm();

      void set_meter(int m);
      void set_cm(int m);

      Distance operator+(Distance d);

      Distance operator-(Distance d);

      Distance operator++();

      Distance operator--();

      Distance operator++(int x);

      Distance operator--(int x);

      Distance operator+=(int x);

      Distance operator-=(int x);

      friend void afn(Distance d);

      friend ostream& operator<<(ostream& os, Distance& d);

};
#endif

Source.cpp
#ifndef BINARY_OPERATOR_CPP
#define BINARY_OPERATOR_CPP
#include "Header.h"
#include<iostream>

using namespace std;

Distance::Distance()
{
      meter = 0;
      cm = 0;
}
Distance::Distance(int meter, int cm)
{
      this->meter = meter;
      this->cm = cm;
}
int Distance::get_meter()
{
      return meter;
}
int Distance::get_cm()
{
      return cm;
}

void Distance::set_meter(int m)
{
      meter = m;
}
void Distance::set_cm(int m)
{
      cm = m;
}

Distance Distance::operator+(Distance d)
{
      Distance temp;
      temp.meter = this->meter + d.meter;
      temp.cm = cm + d.cm;
      return temp;
}

Distance Distance::operator-(Distance d)
{
      Distance temp;
      temp.meter = this->meter - d.meter;
      temp.cm = cm - d.cm;
      return temp;
}
Distance Distance::operator++( )
{
      cout << meter << "->";
      meter++;
      return *this;
}
Distance Distance::operator--()
{
      cout << meter << "->";
      meter--;
      return *this;
}
Distance Distance::operator++(int x)
{
      Distance temp = *this;
      cout << meter << "->";
      meter++;
      return temp;
}
Distance Distance::operator--(int x)
{
      cout << meter << "->";
      meter--;
      return *this;
}
Distance Distance::operator+=(int x)
{
      cout << meter << "->";
      this->meter+=x;
      return *this;
}
Distance Distance::operator-=(int x)
{
      cout << meter << "->";
      this->meter -= x;
      return *this;
}


void afn(Distance a)
{
      cout << "friend function\n";
      a.meter = 200;
      a.cm = 0;
      cout << a.meter << endl << a.cm << endl;
}

ostream& operator<<(ostream& os, Distance& d)
{
      os << "Meter: " << d.meter << " Centimeter: " << d.cm;
      return os;
}
#endif

Main
#include <iostream>
#include "Header.h"

using namespace std;

int main()
{
    cout << "Hello World!\n";
    Distance d1(100, 20), d2(200, 50);
    Distance d3;
    d3 = d1 + d2;
    cout << d3.get_meter() << endl;
    cout << d3.get_cm() << endl;
    d3 = d1 - d2;
    cout << d3.get_meter() << endl;
    cout << d3.get_cm();
    cout << endl;
    ++d1;
    cout << d1.get_meter() << endl;
    --d1;
    cout << d1.get_meter()<<endl;
    cout << endl;
    d2=d1++;
    cout << d1.get_meter() << endl;
    cout << d2.get_meter() << endl;
    d1--;
    cout << d1.get_meter() << endl;

    cout << endl;
    d1=d1+=3;
    cout << d1.get_meter() << endl;
    d1 = d1 -= 10;
    cout << d1.get_meter() << endl;
    afn(d1);
    cout<<endl<<d1.get_meter()<<endl<<d1.get_cm();

    Distance d5(21, 52);
    cout << d5;

}
